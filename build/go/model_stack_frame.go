/*
Faro Collector API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package faro

import (
	"encoding/json"
)

// checks if the StackFrame type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StackFrame{}

// StackFrame struct for StackFrame
type StackFrame struct {
	Colno *int32 `json:"colno,omitempty"`
	Filename *string `json:"filename,omitempty"`
	Function *string `json:"function,omitempty"`
	InApp *bool `json:"in_app,omitempty"`
	Lineno *int32 `json:"lineno,omitempty"`
}

// NewStackFrame instantiates a new StackFrame object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStackFrame() *StackFrame {
	this := StackFrame{}
	return &this
}

// NewStackFrameWithDefaults instantiates a new StackFrame object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStackFrameWithDefaults() *StackFrame {
	this := StackFrame{}
	return &this
}

// GetColno returns the Colno field value if set, zero value otherwise.
func (o *StackFrame) GetColno() int32 {
	if o == nil || IsNil(o.Colno) {
		var ret int32
		return ret
	}
	return *o.Colno
}

// GetColnoOk returns a tuple with the Colno field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackFrame) GetColnoOk() (*int32, bool) {
	if o == nil || IsNil(o.Colno) {
		return nil, false
	}
	return o.Colno, true
}

// HasColno returns a boolean if a field has been set.
func (o *StackFrame) HasColno() bool {
	if o != nil && !IsNil(o.Colno) {
		return true
	}

	return false
}

// SetColno gets a reference to the given int32 and assigns it to the Colno field.
func (o *StackFrame) SetColno(v int32) {
	o.Colno = &v
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *StackFrame) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackFrame) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *StackFrame) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *StackFrame) SetFilename(v string) {
	o.Filename = &v
}

// GetFunction returns the Function field value if set, zero value otherwise.
func (o *StackFrame) GetFunction() string {
	if o == nil || IsNil(o.Function) {
		var ret string
		return ret
	}
	return *o.Function
}

// GetFunctionOk returns a tuple with the Function field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackFrame) GetFunctionOk() (*string, bool) {
	if o == nil || IsNil(o.Function) {
		return nil, false
	}
	return o.Function, true
}

// HasFunction returns a boolean if a field has been set.
func (o *StackFrame) HasFunction() bool {
	if o != nil && !IsNil(o.Function) {
		return true
	}

	return false
}

// SetFunction gets a reference to the given string and assigns it to the Function field.
func (o *StackFrame) SetFunction(v string) {
	o.Function = &v
}

// GetInApp returns the InApp field value if set, zero value otherwise.
func (o *StackFrame) GetInApp() bool {
	if o == nil || IsNil(o.InApp) {
		var ret bool
		return ret
	}
	return *o.InApp
}

// GetInAppOk returns a tuple with the InApp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackFrame) GetInAppOk() (*bool, bool) {
	if o == nil || IsNil(o.InApp) {
		return nil, false
	}
	return o.InApp, true
}

// HasInApp returns a boolean if a field has been set.
func (o *StackFrame) HasInApp() bool {
	if o != nil && !IsNil(o.InApp) {
		return true
	}

	return false
}

// SetInApp gets a reference to the given bool and assigns it to the InApp field.
func (o *StackFrame) SetInApp(v bool) {
	o.InApp = &v
}

// GetLineno returns the Lineno field value if set, zero value otherwise.
func (o *StackFrame) GetLineno() int32 {
	if o == nil || IsNil(o.Lineno) {
		var ret int32
		return ret
	}
	return *o.Lineno
}

// GetLinenoOk returns a tuple with the Lineno field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackFrame) GetLinenoOk() (*int32, bool) {
	if o == nil || IsNil(o.Lineno) {
		return nil, false
	}
	return o.Lineno, true
}

// HasLineno returns a boolean if a field has been set.
func (o *StackFrame) HasLineno() bool {
	if o != nil && !IsNil(o.Lineno) {
		return true
	}

	return false
}

// SetLineno gets a reference to the given int32 and assigns it to the Lineno field.
func (o *StackFrame) SetLineno(v int32) {
	o.Lineno = &v
}

func (o StackFrame) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StackFrame) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Colno) {
		toSerialize["colno"] = o.Colno
	}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	if !IsNil(o.Function) {
		toSerialize["function"] = o.Function
	}
	if !IsNil(o.InApp) {
		toSerialize["in_app"] = o.InApp
	}
	if !IsNil(o.Lineno) {
		toSerialize["lineno"] = o.Lineno
	}
	return toSerialize, nil
}

type NullableStackFrame struct {
	value *StackFrame
	isSet bool
}

func (v NullableStackFrame) Get() *StackFrame {
	return v.value
}

func (v *NullableStackFrame) Set(val *StackFrame) {
	v.value = val
	v.isSet = true
}

func (v NullableStackFrame) IsSet() bool {
	return v.isSet
}

func (v *NullableStackFrame) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStackFrame(val *StackFrame) *NullableStackFrame {
	return &NullableStackFrame{value: val, isSet: true}
}

func (v NullableStackFrame) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStackFrame) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


