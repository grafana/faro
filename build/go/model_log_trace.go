/*
Faro API

The Faro API accepts payloads from the Faro SDKs.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package faro

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the LogTrace type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogTrace{}

// LogTrace struct for LogTrace
type LogTrace struct {
	TraceId string `json:"trace_id"`
	SpanId  string `json:"span_id"`
}

type _LogTrace LogTrace

// NewLogTrace instantiates a new LogTrace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogTrace(traceId string, spanId string) *LogTrace {
	this := LogTrace{}
	this.TraceId = traceId
	this.SpanId = spanId
	return &this
}

// NewLogTraceWithDefaults instantiates a new LogTrace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogTraceWithDefaults() *LogTrace {
	this := LogTrace{}
	return &this
}

// GetTraceId returns the TraceId field value
func (o *LogTrace) GetTraceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TraceId
}

// GetTraceIdOk returns a tuple with the TraceId field value
// and a boolean to check if the value has been set.
func (o *LogTrace) GetTraceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TraceId, true
}

// SetTraceId sets field value
func (o *LogTrace) SetTraceId(v string) {
	o.TraceId = v
}

// GetSpanId returns the SpanId field value
func (o *LogTrace) GetSpanId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SpanId
}

// GetSpanIdOk returns a tuple with the SpanId field value
// and a boolean to check if the value has been set.
func (o *LogTrace) GetSpanIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpanId, true
}

// SetSpanId sets field value
func (o *LogTrace) SetSpanId(v string) {
	o.SpanId = v
}

func (o LogTrace) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogTrace) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["trace_id"] = o.TraceId
	toSerialize["span_id"] = o.SpanId
	return toSerialize, nil
}

func (o *LogTrace) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"trace_id",
		"span_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogTrace := _LogTrace{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLogTrace)

	if err != nil {
		return err
	}

	*o = LogTrace(varLogTrace)

	return err
}

type NullableLogTrace struct {
	value *LogTrace
	isSet bool
}

func (v NullableLogTrace) Get() *LogTrace {
	return v.value
}

func (v *NullableLogTrace) Set(val *LogTrace) {
	v.value = val
	v.isSet = true
}

func (v NullableLogTrace) IsSet() bool {
	return v.isSet
}

func (v *NullableLogTrace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogTrace(val *LogTrace) *NullableLogTrace {
	return &NullableLogTrace{value: val, isSet: true}
}

func (v NullableLogTrace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogTrace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
