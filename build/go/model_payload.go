/*
Faro Collector API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package faro

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Payload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Payload{}

// Payload struct for Payload
type Payload struct {
	Events []Event `json:"events,omitempty"`
	Logs []Log `json:"logs,omitempty"`
	Exceptions []Exception `json:"exceptions,omitempty"`
	Measurements []Measurement `json:"measurements,omitempty"`
	Meta PayloadMeta `json:"meta"`
	Traces *PayloadTraces `json:"traces,omitempty"`
}

type _Payload Payload

// NewPayload instantiates a new Payload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayload(meta PayloadMeta) *Payload {
	this := Payload{}
	this.Meta = meta
	return &this
}

// NewPayloadWithDefaults instantiates a new Payload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayloadWithDefaults() *Payload {
	this := Payload{}
	return &this
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *Payload) GetEvents() []Event {
	if o == nil || IsNil(o.Events) {
		var ret []Event
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payload) GetEventsOk() ([]Event, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *Payload) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []Event and assigns it to the Events field.
func (o *Payload) SetEvents(v []Event) {
	o.Events = v
}

// GetLogs returns the Logs field value if set, zero value otherwise.
func (o *Payload) GetLogs() []Log {
	if o == nil || IsNil(o.Logs) {
		var ret []Log
		return ret
	}
	return o.Logs
}

// GetLogsOk returns a tuple with the Logs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payload) GetLogsOk() ([]Log, bool) {
	if o == nil || IsNil(o.Logs) {
		return nil, false
	}
	return o.Logs, true
}

// HasLogs returns a boolean if a field has been set.
func (o *Payload) HasLogs() bool {
	if o != nil && !IsNil(o.Logs) {
		return true
	}

	return false
}

// SetLogs gets a reference to the given []Log and assigns it to the Logs field.
func (o *Payload) SetLogs(v []Log) {
	o.Logs = v
}

// GetExceptions returns the Exceptions field value if set, zero value otherwise.
func (o *Payload) GetExceptions() []Exception {
	if o == nil || IsNil(o.Exceptions) {
		var ret []Exception
		return ret
	}
	return o.Exceptions
}

// GetExceptionsOk returns a tuple with the Exceptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payload) GetExceptionsOk() ([]Exception, bool) {
	if o == nil || IsNil(o.Exceptions) {
		return nil, false
	}
	return o.Exceptions, true
}

// HasExceptions returns a boolean if a field has been set.
func (o *Payload) HasExceptions() bool {
	if o != nil && !IsNil(o.Exceptions) {
		return true
	}

	return false
}

// SetExceptions gets a reference to the given []Exception and assigns it to the Exceptions field.
func (o *Payload) SetExceptions(v []Exception) {
	o.Exceptions = v
}

// GetMeasurements returns the Measurements field value if set, zero value otherwise.
func (o *Payload) GetMeasurements() []Measurement {
	if o == nil || IsNil(o.Measurements) {
		var ret []Measurement
		return ret
	}
	return o.Measurements
}

// GetMeasurementsOk returns a tuple with the Measurements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payload) GetMeasurementsOk() ([]Measurement, bool) {
	if o == nil || IsNil(o.Measurements) {
		return nil, false
	}
	return o.Measurements, true
}

// HasMeasurements returns a boolean if a field has been set.
func (o *Payload) HasMeasurements() bool {
	if o != nil && !IsNil(o.Measurements) {
		return true
	}

	return false
}

// SetMeasurements gets a reference to the given []Measurement and assigns it to the Measurements field.
func (o *Payload) SetMeasurements(v []Measurement) {
	o.Measurements = v
}

// GetMeta returns the Meta field value
func (o *Payload) GetMeta() PayloadMeta {
	if o == nil {
		var ret PayloadMeta
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *Payload) GetMetaOk() (*PayloadMeta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *Payload) SetMeta(v PayloadMeta) {
	o.Meta = v
}

// GetTraces returns the Traces field value if set, zero value otherwise.
func (o *Payload) GetTraces() PayloadTraces {
	if o == nil || IsNil(o.Traces) {
		var ret PayloadTraces
		return ret
	}
	return *o.Traces
}

// GetTracesOk returns a tuple with the Traces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payload) GetTracesOk() (*PayloadTraces, bool) {
	if o == nil || IsNil(o.Traces) {
		return nil, false
	}
	return o.Traces, true
}

// HasTraces returns a boolean if a field has been set.
func (o *Payload) HasTraces() bool {
	if o != nil && !IsNil(o.Traces) {
		return true
	}

	return false
}

// SetTraces gets a reference to the given PayloadTraces and assigns it to the Traces field.
func (o *Payload) SetTraces(v PayloadTraces) {
	o.Traces = &v
}

func (o Payload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Payload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !IsNil(o.Logs) {
		toSerialize["logs"] = o.Logs
	}
	if !IsNil(o.Exceptions) {
		toSerialize["exceptions"] = o.Exceptions
	}
	if !IsNil(o.Measurements) {
		toSerialize["measurements"] = o.Measurements
	}
	toSerialize["meta"] = o.Meta
	if !IsNil(o.Traces) {
		toSerialize["traces"] = o.Traces
	}
	return toSerialize, nil
}

func (o *Payload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"meta",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPayload := _Payload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPayload)

	if err != nil {
		return err
	}

	*o = Payload(varPayload)

	return err
}

type NullablePayload struct {
	value *Payload
	isSet bool
}

func (v NullablePayload) Get() *Payload {
	return v.value
}

func (v *NullablePayload) Set(val *Payload) {
	v.value = val
	v.isSet = true
}

func (v NullablePayload) IsSet() bool {
	return v.isSet
}

func (v *NullablePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayload(val *Payload) *NullablePayload {
	return &NullablePayload{value: val, isSet: true}
}

func (v NullablePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


