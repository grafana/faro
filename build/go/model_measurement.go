/*
Faro API

The Faro API accepts payloads from the Faro SDKs.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package faro

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Measurement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Measurement{}

// Measurement struct for Measurement
type Measurement struct {
	Values    map[string]float32 `json:"values"`
	Type      string             `json:"type"`
	Timestamp time.Time          `json:"timestamp"`
	Trace     *ExceptionTrace    `json:"trace,omitempty"`
	Context   map[string]string  `json:"context,omitempty"`
}

type _Measurement Measurement

// NewMeasurement instantiates a new Measurement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeasurement(values map[string]float32, type_ string, timestamp time.Time) *Measurement {
	this := Measurement{}
	this.Values = values
	this.Type = type_
	this.Timestamp = timestamp
	return &this
}

// NewMeasurementWithDefaults instantiates a new Measurement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeasurementWithDefaults() *Measurement {
	this := Measurement{}
	return &this
}

// GetValues returns the Values field value
func (o *Measurement) GetValues() map[string]float32 {
	if o == nil {
		var ret map[string]float32
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *Measurement) GetValuesOk() (map[string]float32, bool) {
	if o == nil {
		return map[string]float32{}, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *Measurement) SetValues(v map[string]float32) {
	o.Values = v
}

// GetType returns the Type field value
func (o *Measurement) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Measurement) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Measurement) SetType(v string) {
	o.Type = v
}

// GetTimestamp returns the Timestamp field value
func (o *Measurement) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *Measurement) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *Measurement) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetTrace returns the Trace field value if set, zero value otherwise.
func (o *Measurement) GetTrace() ExceptionTrace {
	if o == nil || IsNil(o.Trace) {
		var ret ExceptionTrace
		return ret
	}
	return *o.Trace
}

// GetTraceOk returns a tuple with the Trace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Measurement) GetTraceOk() (*ExceptionTrace, bool) {
	if o == nil || IsNil(o.Trace) {
		return nil, false
	}
	return o.Trace, true
}

// HasTrace returns a boolean if a field has been set.
func (o *Measurement) HasTrace() bool {
	if o != nil && !IsNil(o.Trace) {
		return true
	}

	return false
}

// SetTrace gets a reference to the given ExceptionTrace and assigns it to the Trace field.
func (o *Measurement) SetTrace(v ExceptionTrace) {
	o.Trace = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *Measurement) GetContext() map[string]string {
	if o == nil || IsNil(o.Context) {
		var ret map[string]string
		return ret
	}
	return o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Measurement) GetContextOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Context) {
		return map[string]string{}, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *Measurement) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given map[string]string and assigns it to the Context field.
func (o *Measurement) SetContext(v map[string]string) {
	o.Context = v
}

func (o Measurement) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Measurement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["values"] = o.Values
	toSerialize["type"] = o.Type
	toSerialize["timestamp"] = o.Timestamp
	if !IsNil(o.Trace) {
		toSerialize["trace"] = o.Trace
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	return toSerialize, nil
}

func (o *Measurement) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"values",
		"type",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMeasurement := _Measurement{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMeasurement)

	if err != nil {
		return err
	}

	*o = Measurement(varMeasurement)

	return err
}

type NullableMeasurement struct {
	value *Measurement
	isSet bool
}

func (v NullableMeasurement) Get() *Measurement {
	return v.value
}

func (v *NullableMeasurement) Set(val *Measurement) {
	v.value = val
	v.isSet = true
}

func (v NullableMeasurement) IsSet() bool {
	return v.isSet
}

func (v *NullableMeasurement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeasurement(val *Measurement) *NullableMeasurement {
	return &NullableMeasurement{value: val, isSet: true}
}

func (v NullableMeasurement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeasurement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
