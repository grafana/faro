/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/collect/{appKey}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit a Faro payload */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The application key is provided by your endpoint provider.
                     *      */
                    appKey: string;
                };
                cookie?: never;
            };
            /** @description Optional description in *Markdown* */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Payload"];
                };
            };
            responses: {
                /** @description OK */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unexpected error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Exception"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Event: {
            name: string;
            domain: string;
            attributes?: {
                [key: string]: string;
            };
            /** Format: date-time */
            timestamp: string;
        };
        Log: {
            message: string;
            level: string;
            context?: {
                [key: string]: string;
            };
            /** Format: date-time */
            timestamp: string;
            trace?: {
                trace_id: string;
                span_id: string;
            };
        };
        StackFrame: {
            colno?: number;
            filename?: string;
            function?: string;
            in_app?: boolean;
            lineno?: number;
        };
        Exception: {
            type: string;
            value: string;
            stacktrace?: components["schemas"]["StackFrame"][];
            /** Format: date-time */
            timestamp: string;
            trace?: {
                trace_id?: string;
                span_id?: string;
            };
            context?: {
                [key: string]: string;
            };
        };
        Measurement: {
            values: {
                [key: string]: number;
            };
            type: string;
            /** Format: date-time */
            timestamp: string;
            trace?: {
                trace_id?: string;
                span_id?: string;
            };
            context?: {
                [key: string]: string;
            };
        };
        SpanEvent: {
            attributes?: unknown[];
            droppedAttributesCount?: number;
            name: string;
            timeUnixNano?: string;
        };
        SdkMeta: {
            name: string;
            version: string;
        };
        AppMeta: {
            name: string;
            release: string;
            version: string;
            environment: string;
        };
        UserMeta: {
            username?: string;
            id?: string;
            email?: string;
            attributes?: {
                [key: string]: string;
            };
        };
        SessionMeta: {
            id?: string;
            attributes?: {
                [key: string]: string;
            };
        };
        PageMeta: {
            url?: string;
        };
        BrowserMeta: {
            name?: string;
            version?: string;
            os?: string;
            mobile?: boolean;
        };
        Payload: {
            events?: components["schemas"]["Event"][];
            logs?: components["schemas"]["Log"][];
            exceptions?: components["schemas"]["Exception"][];
            measurements?: components["schemas"]["Measurement"][];
            meta: {
                sdk?: components["schemas"]["SdkMeta"];
                app?: components["schemas"]["AppMeta"];
                user?: components["schemas"]["UserMeta"];
                session?: components["schemas"]["SessionMeta"];
                page?: components["schemas"]["PageMeta"];
                browser?: components["schemas"]["BrowserMeta"];
                view?: {
                    name?: string;
                };
            };
            traces?: {
                resourceSpans?: {
                    resource: {
                        attributes?: {
                            key: string;
                            value: {
                                [key: string]: string;
                            };
                        };
                    };
                    instrumentationLibrarySpans: {
                        instrumentationLibrary: {
                            name: string;
                            version: string;
                        };
                        spans?: {
                            attributes?: {
                                key: string;
                                value: Record<string, never>;
                            };
                            droppedAttributesCount?: number;
                            droppedEventsCount?: number;
                            droppedLinksCount?: number;
                            endTimeUnixNano: number;
                            events?: components["schemas"]["SpanEvent"][];
                            /** @enum {integer} */
                            kind: 1;
                            links?: {
                                [key: string]: string;
                            }[];
                            name: string;
                            parentSpanId?: string;
                            spanId: string;
                            startTimeUnixNano: number;
                            status: {
                                code?: number;
                                message?: string;
                            };
                            traceId: string;
                        }[];
                    }[];
                }[];
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
