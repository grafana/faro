/*
Faro API

The Faro API accepts payloads from the Faro SDKs.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TimeFormat the model 'TimeFormat'
type TimeFormat string

// List of TimeFormat
const (
	RFC3339Milli TimeFormat = "2006-01-02T15:04:05.999Z"
)

// All allowed values of TimeFormat enum
var AllowedTimeFormatEnumValues = []TimeFormat{
	"2006-01-02T15:04:05.999Z",
}

func (v *TimeFormat) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TimeFormat(value)
	for _, existing := range AllowedTimeFormatEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TimeFormat", value)
}

// NewTimeFormatFromValue returns a pointer to a valid TimeFormat
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTimeFormatFromValue(v string) (*TimeFormat, error) {
	ev := TimeFormat(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TimeFormat: valid values are %v", v, AllowedTimeFormatEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TimeFormat) IsValid() bool {
	for _, existing := range AllowedTimeFormatEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TimeFormat value
func (v TimeFormat) Ptr() *TimeFormat {
	return &v
}

type NullableTimeFormat struct {
	value *TimeFormat
	isSet bool
}

func (v NullableTimeFormat) Get() *TimeFormat {
	return v.value
}

func (v *NullableTimeFormat) Set(val *TimeFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeFormat(val *TimeFormat) *NullableTimeFormat {
	return &NullableTimeFormat{value: val, isSet: true}
}

func (v NullableTimeFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

