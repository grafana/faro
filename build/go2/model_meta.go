/*
Faro API

The Faro API accepts payloads from the Faro SDKs.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Meta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Meta{}

// Meta holds metadata about an app event.
type Meta struct {
	Sdk *SDK `json:"sdk,omitempty"`
	App *App `json:"app,omitempty"`
	User *User `json:"user,omitempty"`
	Session *Session `json:"session,omitempty"`
	Page *Page `json:"page,omitempty"`
	Browser *Browser `json:"browser,omitempty"`
	K6 *K6 `json:"k6,omitempty"`
	View *View `json:"view,omitempty"`
}

// NewMeta instantiates a new Meta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeta() *Meta {
	this := Meta{}
	return &this
}

// NewMetaWithDefaults instantiates a new Meta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaWithDefaults() *Meta {
	this := Meta{}
	return &this
}

// GetSdk returns the Sdk field value if set, zero value otherwise.
func (o *Meta) GetSdk() SDK {
	if o == nil || IsNil(o.Sdk) {
		var ret SDK
		return ret
	}
	return *o.Sdk
}

// GetSdkOk returns a tuple with the Sdk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Meta) GetSdkOk() (*SDK, bool) {
	if o == nil || IsNil(o.Sdk) {
		return nil, false
	}
	return o.Sdk, true
}

// HasSdk returns a boolean if a field has been set.
func (o *Meta) HasSdk() bool {
	if o != nil && !IsNil(o.Sdk) {
		return true
	}

	return false
}

// SetSdk gets a reference to the given SDK and assigns it to the Sdk field.
func (o *Meta) SetSdk(v SDK) {
	o.Sdk = &v
}

// GetApp returns the App field value if set, zero value otherwise.
func (o *Meta) GetApp() App {
	if o == nil || IsNil(o.App) {
		var ret App
		return ret
	}
	return *o.App
}

// GetAppOk returns a tuple with the App field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Meta) GetAppOk() (*App, bool) {
	if o == nil || IsNil(o.App) {
		return nil, false
	}
	return o.App, true
}

// HasApp returns a boolean if a field has been set.
func (o *Meta) HasApp() bool {
	if o != nil && !IsNil(o.App) {
		return true
	}

	return false
}

// SetApp gets a reference to the given App and assigns it to the App field.
func (o *Meta) SetApp(v App) {
	o.App = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *Meta) GetUser() User {
	if o == nil || IsNil(o.User) {
		var ret User
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Meta) GetUserOk() (*User, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *Meta) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given User and assigns it to the User field.
func (o *Meta) SetUser(v User) {
	o.User = &v
}

// GetSession returns the Session field value if set, zero value otherwise.
func (o *Meta) GetSession() Session {
	if o == nil || IsNil(o.Session) {
		var ret Session
		return ret
	}
	return *o.Session
}

// GetSessionOk returns a tuple with the Session field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Meta) GetSessionOk() (*Session, bool) {
	if o == nil || IsNil(o.Session) {
		return nil, false
	}
	return o.Session, true
}

// HasSession returns a boolean if a field has been set.
func (o *Meta) HasSession() bool {
	if o != nil && !IsNil(o.Session) {
		return true
	}

	return false
}

// SetSession gets a reference to the given Session and assigns it to the Session field.
func (o *Meta) SetSession(v Session) {
	o.Session = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *Meta) GetPage() Page {
	if o == nil || IsNil(o.Page) {
		var ret Page
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Meta) GetPageOk() (*Page, bool) {
	if o == nil || IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *Meta) HasPage() bool {
	if o != nil && !IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given Page and assigns it to the Page field.
func (o *Meta) SetPage(v Page) {
	o.Page = &v
}

// GetBrowser returns the Browser field value if set, zero value otherwise.
func (o *Meta) GetBrowser() Browser {
	if o == nil || IsNil(o.Browser) {
		var ret Browser
		return ret
	}
	return *o.Browser
}

// GetBrowserOk returns a tuple with the Browser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Meta) GetBrowserOk() (*Browser, bool) {
	if o == nil || IsNil(o.Browser) {
		return nil, false
	}
	return o.Browser, true
}

// HasBrowser returns a boolean if a field has been set.
func (o *Meta) HasBrowser() bool {
	if o != nil && !IsNil(o.Browser) {
		return true
	}

	return false
}

// SetBrowser gets a reference to the given Browser and assigns it to the Browser field.
func (o *Meta) SetBrowser(v Browser) {
	o.Browser = &v
}

// GetK6 returns the K6 field value if set, zero value otherwise.
func (o *Meta) GetK6() K6 {
	if o == nil || IsNil(o.K6) {
		var ret K6
		return ret
	}
	return *o.K6
}

// GetK6Ok returns a tuple with the K6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Meta) GetK6Ok() (*K6, bool) {
	if o == nil || IsNil(o.K6) {
		return nil, false
	}
	return o.K6, true
}

// HasK6 returns a boolean if a field has been set.
func (o *Meta) HasK6() bool {
	if o != nil && !IsNil(o.K6) {
		return true
	}

	return false
}

// SetK6 gets a reference to the given K6 and assigns it to the K6 field.
func (o *Meta) SetK6(v K6) {
	o.K6 = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *Meta) GetView() View {
	if o == nil || IsNil(o.View) {
		var ret View
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Meta) GetViewOk() (*View, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *Meta) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given View and assigns it to the View field.
func (o *Meta) SetView(v View) {
	o.View = &v
}

func (o Meta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Meta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Sdk) {
		toSerialize["sdk"] = o.Sdk
	}
	if !IsNil(o.App) {
		toSerialize["app"] = o.App
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Session) {
		toSerialize["session"] = o.Session
	}
	if !IsNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	if !IsNil(o.Browser) {
		toSerialize["browser"] = o.Browser
	}
	if !IsNil(o.K6) {
		toSerialize["k6"] = o.K6
	}
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}
	return toSerialize, nil
}

type NullableMeta struct {
	value *Meta
	isSet bool
}

func (v NullableMeta) Get() *Meta {
	return v.value
}

func (v *NullableMeta) Set(val *Meta) {
	v.value = val
	v.isSet = true
}

func (v NullableMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeta(val *Meta) *NullableMeta {
	return &NullableMeta{value: val, isSet: true}
}

func (v NullableMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


