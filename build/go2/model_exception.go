/*
Faro API

The Faro API accepts payloads from the Faro SDKs.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Exception type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Exception{}

// Exception holds all the data regarding an exception.
type Exception struct {
	Context *map[string]string `json:"context,omitempty"`
	Stacktrace *Stacktrace `json:"stacktrace,omitempty"`
	Timestamp time.Time `json:"timestamp"`
	Trace *TraceContext `json:"trace,omitempty"`
	Type *string `json:"type,omitempty"`
	Value *string `json:"value,omitempty"`
}

type _Exception Exception

// NewException instantiates a new Exception object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewException(timestamp time.Time) *Exception {
	this := Exception{}
	this.Timestamp = timestamp
	return &this
}

// NewExceptionWithDefaults instantiates a new Exception object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExceptionWithDefaults() *Exception {
	this := Exception{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *Exception) GetContext() map[string]string {
	if o == nil || IsNil(o.Context) {
		var ret map[string]string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Exception) GetContextOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *Exception) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given map[string]string and assigns it to the Context field.
func (o *Exception) SetContext(v map[string]string) {
	o.Context = &v
}

// GetStacktrace returns the Stacktrace field value if set, zero value otherwise.
func (o *Exception) GetStacktrace() Stacktrace {
	if o == nil || IsNil(o.Stacktrace) {
		var ret Stacktrace
		return ret
	}
	return *o.Stacktrace
}

// GetStacktraceOk returns a tuple with the Stacktrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Exception) GetStacktraceOk() (*Stacktrace, bool) {
	if o == nil || IsNil(o.Stacktrace) {
		return nil, false
	}
	return o.Stacktrace, true
}

// HasStacktrace returns a boolean if a field has been set.
func (o *Exception) HasStacktrace() bool {
	if o != nil && !IsNil(o.Stacktrace) {
		return true
	}

	return false
}

// SetStacktrace gets a reference to the given Stacktrace and assigns it to the Stacktrace field.
func (o *Exception) SetStacktrace(v Stacktrace) {
	o.Stacktrace = &v
}

// GetTimestamp returns the Timestamp field value
func (o *Exception) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *Exception) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *Exception) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetTrace returns the Trace field value if set, zero value otherwise.
func (o *Exception) GetTrace() TraceContext {
	if o == nil || IsNil(o.Trace) {
		var ret TraceContext
		return ret
	}
	return *o.Trace
}

// GetTraceOk returns a tuple with the Trace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Exception) GetTraceOk() (*TraceContext, bool) {
	if o == nil || IsNil(o.Trace) {
		return nil, false
	}
	return o.Trace, true
}

// HasTrace returns a boolean if a field has been set.
func (o *Exception) HasTrace() bool {
	if o != nil && !IsNil(o.Trace) {
		return true
	}

	return false
}

// SetTrace gets a reference to the given TraceContext and assigns it to the Trace field.
func (o *Exception) SetTrace(v TraceContext) {
	o.Trace = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Exception) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Exception) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Exception) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Exception) SetType(v string) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Exception) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Exception) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Exception) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *Exception) SetValue(v string) {
	o.Value = &v
}

func (o Exception) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Exception) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.Stacktrace) {
		toSerialize["stacktrace"] = o.Stacktrace
	}
	toSerialize["timestamp"] = o.Timestamp
	if !IsNil(o.Trace) {
		toSerialize["trace"] = o.Trace
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

func (o *Exception) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varException := _Exception{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varException)

	if err != nil {
		return err
	}

	*o = Exception(varException)

	return err
}

type NullableException struct {
	value *Exception
	isSet bool
}

func (v NullableException) Get() *Exception {
	return v.value
}

func (v *NullableException) Set(val *Exception) {
	v.value = val
	v.isSet = true
}

func (v NullableException) IsSet() bool {
	return v.isSet
}

func (v *NullableException) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableException(val *Exception) *NullableException {
	return &NullableException{value: val, isSet: true}
}

func (v NullableException) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableException) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


