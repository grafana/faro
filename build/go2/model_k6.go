/*
Faro API

The Faro API accepts payloads from the Faro SDKs.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the K6 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &K6{}

// K6 holds metadata about whether or not the run happened in a K6 browser.
type K6 struct {
	IsK6Browser *bool `json:"isK6Browser,omitempty"`
}

// NewK6 instantiates a new K6 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewK6() *K6 {
	this := K6{}
	return &this
}

// NewK6WithDefaults instantiates a new K6 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewK6WithDefaults() *K6 {
	this := K6{}
	return &this
}

// GetIsK6Browser returns the IsK6Browser field value if set, zero value otherwise.
func (o *K6) GetIsK6Browser() bool {
	if o == nil || IsNil(o.IsK6Browser) {
		var ret bool
		return ret
	}
	return *o.IsK6Browser
}

// GetIsK6BrowserOk returns a tuple with the IsK6Browser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K6) GetIsK6BrowserOk() (*bool, bool) {
	if o == nil || IsNil(o.IsK6Browser) {
		return nil, false
	}
	return o.IsK6Browser, true
}

// HasIsK6Browser returns a boolean if a field has been set.
func (o *K6) HasIsK6Browser() bool {
	if o != nil && !IsNil(o.IsK6Browser) {
		return true
	}

	return false
}

// SetIsK6Browser gets a reference to the given bool and assigns it to the IsK6Browser field.
func (o *K6) SetIsK6Browser(v bool) {
	o.IsK6Browser = &v
}

func (o K6) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o K6) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsK6Browser) {
		toSerialize["isK6Browser"] = o.IsK6Browser
	}
	return toSerialize, nil
}

type NullableK6 struct {
	value *K6
	isSet bool
}

func (v NullableK6) Get() *K6 {
	return v.value
}

func (v *NullableK6) Set(val *K6) {
	v.value = val
	v.isSet = true
}

func (v NullableK6) IsSet() bool {
	return v.isSet
}

func (v *NullableK6) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableK6(val *K6) *NullableK6 {
	return &NullableK6{value: val, isSet: true}
}

func (v NullableK6) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableK6) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


